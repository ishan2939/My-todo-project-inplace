pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID="654654485151"
        AWS_DEFAULT_REGION="us-east-1"
	    CLUSTER_NAME="My_todo_Cluster"
	    SERVICE_NAME="Backend_Service"
	    TASK_DEFINITION_NAME="My_todo_task_definition_Backend"
	    DESIRED_COUNT="1"
        IMAGE_REPO_NAME="my_todo_backend"
        //Do not edit the variable IMAGE_TAG. It uses the Jenkins job build ID as a tag for the new image.
        IMAGE_TAG="${env.BUILD_ID}"
        //Do not edit REPOSITORY_URI.
        REPOSITORY_URI = "public.ecr.aws/s0z9h6z8/${IMAGE_REPO_NAME}"
	    registryCredential = "aws-credentials"
	    JOB_NAME = "${env.JOB_NAME}"
	    TEST_CONTAINER_NAME = "${JOB_NAME}-test-server"
    
}
   
    stages {

    // Building Docker image
    stage('Building image') {
      steps{
        script {
          dockerImage = docker.build "${IMAGE_REPO_NAME}:${IMAGE_TAG}" , "./backend/"
        }
      }
     }
    // Run container locally and perform tests
    // stage('Running tests') {
    //   steps{
    //     sh 'docker run -i --rm --name "${TEST_CONTAINER_NAME}" "${IMAGE_REPO_NAME}:${IMAGE_TAG}" npm test -- --watchAll=false'
    //   }
    // }

    // Uploading Docker image into AWS ECR
    stage('Releasing') {
     steps{  
         script {

            // sh "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/s0z9h6z8"
            
            sh "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/s0z9h6z8"

			// docker.withRegistry("https://" + REPOSITORY_URI) {
            //         	dockerImage.push()
            // }


            // withAWS(credentials: registryCredential, region: "${AWS_DEFAULT_REGION}") {
            //     script {
			//         sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:latest"
            //         sh 'docker push public.ecr.aws/s0z9h6z8/my_todo_backend:latest'

            //     }
            // } 

            withDockerRegistry([credentialsId: registryCredential, url: "https://public.ecr.aws/s0z9h6z8/my_todo_backend:latest/"]) {
                script {
                    // sh "docker logout public.ecr.aws"
                    sh "aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/s0z9h6z8"
			        sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:latest"
                    sh 'docker push public.ecr.aws/s0z9h6z8/my_todo_backend:latest'

                }
            }

            // sh "docker logout public.ecr.aws"

            sh "docker tag ${IMAGE_REPO_NAME}:${IMAGE_TAG} ${REPOSITORY_URI}:latest"
            sh 'docker push public.ecr.aws/s0z9h6z8/my_todo_backend:latest' 
         }
       }
     }

    // Update task definition and service running in ECS cluster to deploy
    stage('Deploy') {
     steps{
            withAWS(credentials: registryCredential, region: "${AWS_DEFAULT_REGION}") {
                script {
			sh "chmod +x -R ${env.WORKSPACE}"
			sh './script.sh'
                }
            } 
         }
       }
     }
   // Clear local image registry. Note that all the data that was used to build the image is being cleared.
   // For different use cases, one may not want to clear all this data so it doesn't have to be pulled again for each build.
   post {
       always {
       sh 'docker system prune -a -f'
     }
   }
 }